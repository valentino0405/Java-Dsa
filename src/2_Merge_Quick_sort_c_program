

#include <stdio.h>
#include <conio.h>

void merge(int A[], int low, int mid, int high, int *pass) {
    int h = low, i = low, j = mid + 1;
    int B[50];

    while (h <= mid && j <= high) {
	if (A[h] <= A[j]) {
	    B[i] = A[h];
	    h++;
	} else {
	    B[i] = A[j];
	    j++;
	}
	i++;
    }

    while (h <= mid) {
	B[i] = A[h];
	h++;
	i++;
    }

    while (j <= high) {
	B[i] = A[j];
	j++;
	i++;
    }

    for (int k = low; k <= high; k++) {
	A[k] = B[k];
    }

    printf("After merging, pass %d: ", (*pass)++);
    for ( k = low; k <= high; k++) {
	printf("%d ", A[k]);
    }
    printf("\n");
}

void mergeSort(int A[], int low, int high, int *pass) {
    if (low < high) {
	int mid = (low + high) / 2;
	mergeSort(A, low, mid, pass);
	mergeSort(A, mid + 1, high, pass);
	merge(A, low, mid, high, pass);
    }
}

int partition(int A[], int lb, int ub, int *pass) {
    int pivot = A[lb];
    int up = ub;
    int down = lb;

    while (down < up) {
	while (A[down] <= pivot && down < ub) {
	    down++;
	}
	while (A[up] > pivot) {
	    up--;
	}
	if (down < up) {
	    int temp = A[down];
	    A[down] = A[up];
	    A[up] = temp;
	}
    }

    A[lb] = A[up];
    A[up] = pivot;

    printf("After partitioning, pass %d: ", (*pass)++);
    for (int i = lb; i <= ub; i++) {
	printf("%d ", A[i]);
    }
    printf("\n");

    return up;
}

void quickSort(int A[], int lb, int ub, int *pass) {
    if (lb < ub) {
	int pivot = partition(A, lb, ub, pass);
	quickSort(A, lb, pivot - 1, pass);
	quickSort(A, pivot + 1, ub, pass);
    }
}

int main() {
    int n, i;
    clrscr();

    printf("Enter the number of elements: ");
    scanf("%d", &n);

    int A1[50], A2[50];
    printf("Enter the elements:\n");
    for (i = 0; i < n; i++) {
	scanf("%d", &A1[i]);
	A2[i] = A1[i];
    }

    printf("\nOriginal Array: ");
    for (i = 0; i < n; i++) {
	printf("%d ", A1[i]);
    }
    printf("\n");

    int mergePass = 1, quickPass = 1;

    printf("\nMerge Sort Passes:\n");
    mergeSort(A1, 0, n - 1, &mergePass);
    printf("\nSorted Array using Merge Sort: ");
    for (i = 0; i < n; i++) {
	printf("%d ", A1[i]);
    }
    printf("\n");

    printf("\nQuick Sort Passes:\n");
    quickSort(A2, 0, n - 1, &quickPass);
    printf("\nSorted Array using Quick Sort: ");
    for (i = 0; i < n; i++) {
	printf("%d ", A2[i]);
    }
    printf("\n");
    getch();
    return 0;
}
